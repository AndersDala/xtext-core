/*
 * Copyright (c) 2018 TypeFox GmbH (http://www.typefox.io) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
grammar org.eclipse.xtext.ide.tests.testlanguage.Core861_ContentAssistLookAheadTestLanguage with org.eclipse.xtext.common.Terminals

generate core861_contentAssistLookAheadTestLanguage "http://www.eclipse.org/xtext/ide/tests/testlanguage/Core861_ContentAssistLookAheadTestLanguage"

Member:
	FieldDecl | MethodDecl
;

FieldDecl:
	annotations+=Annotation* modifier = ('private' | 'public')? type = Type name = ID ('=' initVal = INT)? ';'
;

MethodDecl:
	annotations+=Annotation* modifier = ('private' | 'public')? type = Type name = ID '(' ')' '{'
		(decls += FieldDecl)*
		(statements += Statement)*
	'}'
;

Type:
    {IntType} "int" | ({TypeRef} type = [Type | QualifiedName])
;

QualifiedName:
  ID ('.' ID)*
;

Statement:
	AssignmentStatement
	| {Return} 'return' ';'
;

AssignmentStatement:
    FeatureCall ({Assignment.feature = current} '=' rhs = INT)? ';'
;

FeatureCall:
	feature = [ Member | ID]
	(
        {MemberCall.owner=current} ->"." member = [ Member | ID]
    )*;

Annotation:
    '@' key=ID ('(' values+=STRING(',' values+=STRING)* ')')?
;